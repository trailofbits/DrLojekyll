// Copyright 2019, Trail of Bits. All rights reserved.

#pragma once

#include <drlojekyll/Rel/Query.h>

namespace hyde {

class QueryBuilderImpl;
class SIPSScorer;
class SIPSGenerator;

// Builds up a query.
class QueryBuilder {
 public:

  QueryBuilder(void);
  ~QueryBuilder(void);

  // Build an insertion query for the best scoring, according to `scorer`,
  // permutation of some clause body, possibly given some predicate, as
  // generated by `generator`.
  void VisitClause(SIPSScorer &scorer, SIPSGenerator &generator);

  // Return the final query.
  Query BuildQuery(void);

 private:
  std::unique_ptr<QueryBuilderImpl> impl;
};

}  // namespace hyde
