// Copyright 2019, Trail of Bits. All rights reserved.

#include <drlojekyll/Sema/SIPSScore.h>

#include <string>

namespace hyde {

class BindingSpeedSIPSScorer::Impl {
 public:
  int best_permutation{-1};
  int current_permutation{-1};
  std::string current_score;
  std::string best_score;
};

BindingSpeedSIPSScorer::BindingSpeedSIPSScorer(void)
    : impl(new Impl) {}

BindingSpeedSIPSScorer::~BindingSpeedSIPSScorer(void) {}
FastBindingSIPSScorer::~FastBindingSIPSScorer(void) {}
SlowBindingSIPSScorer::~SlowBindingSIPSScorer(void) {}

int BindingSpeedSIPSScorer::BestPermutation(void) const {
  return impl->best_permutation;
}

void BindingSpeedSIPSScorer::Begin(ParsedPredicate) {
  impl->current_permutation++;
  impl->current_score.clear();
}

void BindingSpeedSIPSScorer::Begin(ParsedClause) {
  impl->current_permutation++;
  impl->current_score.clear();
}

void FastBindingSIPSScorer::Commit(ParsedPredicate pred) {
  return Commit(ParsedClause::Containing(pred));
}

void FastBindingSIPSScorer::Commit(ParsedClause) {
  std::reverse(impl->current_score.begin(), impl->current_score.end());
  if (impl->best_score.empty() || impl->current_score > impl->best_score) {
    impl->best_score.swap(impl->current_score);
    impl->best_permutation = impl->current_permutation;
  }
}

void SlowBindingSIPSScorer::Commit(ParsedPredicate pred) {
  return Commit(ParsedClause::Containing(pred));
}

void SlowBindingSIPSScorer::Commit(ParsedClause) {
  std::reverse(impl->current_score.begin(), impl->current_score.end());
  if (impl->best_score.empty() || impl->current_score < impl->best_score) {
    impl->best_score.swap(impl->current_score);
    impl->best_permutation = impl->current_permutation;
  }
}

void BindingSpeedSIPSScorer::AssertPresent(
    ParsedDeclaration, ParsedPredicate,
    const Column *where_begin, const Column *where_end) {
  for (auto col = where_begin; col < where_end; ++col) {
    impl->current_score.push_back('\0');
  }
}

void BindingSpeedSIPSScorer::EnterFromWhereSelect(
    ParsedPredicate, ParsedDeclaration,
    const Column *where_begin, const Column *where_end,
    const Column *select_begin, const Column *select_end) {
  for (auto col = select_begin; col < select_end; ++col) {
    impl->current_score.push_back('\1');
  }
  for (auto col = where_begin; col < where_end; ++col) {
    impl->current_score.push_back('\0');
  }
}

void BindingSpeedSIPSScorer::EnterFromSelect(
    ParsedPredicate, ParsedDeclaration,
    const Column *select_begin, const Column *select_end) {
  for (auto col = select_begin; col < select_end; ++col) {
    impl->current_score.push_back('\1');
  }
}

// Use `scorer` to find the best permutation that can be generated by
// `generator`, and then apply `visitor` to that permutation.
//
// Returns `true` if any permutation was visited, and `false` otherwise.
bool SIPSScorer::VisitBestScoringPermuation(
    SIPSScorer &scorer, SIPSVisitor &visitor, SIPSGenerator &generator) {

  auto best_index = scorer.BestPermutation();
  if (0 > best_index) {
    generator.Rewind();
    do {
      (void) generator.Visit(scorer);
    } while (generator.Advance());
    best_index = scorer.BestPermutation();
    if (0 > best_index) {
      return false;
    }
  }

  generator.Rewind();
  for (auto i = 0; i < best_index; ++i) {
    if (!generator.Advance()) {
      return false;
    }
  }

  generator.Visit(visitor);

  return true;
}

}  // namespace hyde
