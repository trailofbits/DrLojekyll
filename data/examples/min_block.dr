; #include <algorithm>
; #include <climits>

#functor min(aggregate i32 Val, summary i32 MinVal)
#inline <!

CONFIGURE_AGGREGATOR(min, as) {
  self.MinVal = INT_MAX;
}

UPDATE_AGGREGATOR(min, as, i32 Val) {
  self.MinVal = std::min<i32>(self.MinVal, Val);
}

!>

#functor min(bound i32 OldMin, bound i32 ProposedMin, free i32 NewMin)
#inline <!

MERGE_VALUES(min, i32, OldMin, ProposedMin) {
  return std::min<i32>(OldMin, ProposedMin);
} 

!>

#query first_block(free i32 Address)
#message add_basic_block(i32 BlockAddress)
#local agg_first_block(Address)
#local mut_first_block(mutable(min) Address)

agg_first_block(MinAddress) : min(BlockAddress, MinAddress) over add_basic_block(BlockAddress).
mut_first_block(Address) : add_basic_block(Address).

 
first_block(MinAddress) : agg_first_block(MinAddress).
first_block(MinAddress) : mut_first_block(MinAddress).
