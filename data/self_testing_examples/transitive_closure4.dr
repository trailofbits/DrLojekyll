#message add_edge(u64 From, u64 To).
#query reachable_from(bound u64 From, free u64 To).
#query reaching_to(free u64 From, bound u64 To).
#local tc(From, To).

reachable_from(From, To) : tc(From, To).
reaching_to(From, To) : tc(From, To).

tc(From, To) : add_edge(From, X), tc(X, To).
tc(From, To) : add_edge(From, To).

#query is_node(free u64 Node).

is_node(Node) : tc(Node, _).
is_node(Node) : tc(_, Node).

#epilogue ```python
class Functors(DatabaseFunctors):
  pass

if __name__ == "__main__":
  db = Database(DatabaseLog(), Functors())

  # start with a simple graph
  db.add_edge_2([(0,1), (0,2), (2,0), (1,2), (2,3)])

  assert sorted(db.reachable_from_bf(0)) == [0, 1, 2, 3]
  assert sorted(db.reachable_from_bf(1)) == [0, 1, 2, 3]
  assert sorted(db.reachable_from_bf(2)) == [0, 1, 2, 3]
  assert sorted(db.reachable_from_bf(3)) == []
  assert sorted(db.reachable_from_bf(4)) == []

  assert sorted(db.reaching_to_fb(0)) == [0, 1, 2]
  assert sorted(db.reaching_to_fb(1)) == [0, 1, 2]
  assert sorted(db.reaching_to_fb(2)) == [0, 1, 2]
  assert sorted(db.reaching_to_fb(3)) == [0, 1, 2]
  assert sorted(db.reaching_to_fb(4)) == []

  assert sorted(db.is_node_f()) == [0, 1, 2, 3]

  # now add more to the graph
  db.add_edge_2([(4, 3)])
  assert sorted(db.reachable_from_bf(0)) == [0, 1, 2, 3]
  assert sorted(db.reachable_from_bf(1)) == [0, 1, 2, 3]
  assert sorted(db.reachable_from_bf(2)) == [0, 1, 2, 3]
  assert sorted(db.reachable_from_bf(3)) == []
  assert sorted(db.reachable_from_bf(4)) == [3]

  assert sorted(db.reaching_to_fb(0)) == [0, 1, 2]
  assert sorted(db.reaching_to_fb(1)) == [0, 1, 2]
  assert sorted(db.reaching_to_fb(2)) == [0, 1, 2]
  assert sorted(db.reaching_to_fb(3)) == [0, 1, 2, 4]
  assert sorted(db.reaching_to_fb(4)) == []

  assert sorted(db.is_node_f()) == [0, 1, 2, 3, 4]
```
