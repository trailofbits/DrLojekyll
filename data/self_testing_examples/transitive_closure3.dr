#message add_edge1(i64 From, i64 To).
#message add_edge2(i64 From, i64 To).
#query reachable_from(bound i64 From, free i64 To).
#query reaching_to(free i64 From, bound i64 To).
#local tc1(From, To).
#local tc2(From, To).

reachable_from(From, To) : tc1(From, To).
reaching_to(From, To) : tc2(From, To).

tc1(From, To) : tc1(From, X), tc2(X, To).
tc1(From, To) : add_edge1(From, To).

tc2(From, To) : tc2(From, X), tc1(X, To).
tc2(From, To) : add_edge2(From, To).


#query is_node(free i64 Node).

is_node(Node) : tc1(Node, _).
is_node(Node) : tc1(_, Node).
is_node(Node) : tc2(Node, _).
is_node(Node) : tc2(_, Node).

#epilogue ```c++
#include "runtime_std_impl.h"
#include <algorithm>
#include <vector>
#include <iostream>


int main() {
  DatabaseFunctors functors;
  DatabaseLog log;
  auto backend = hyde::rt::std_containers();
  Database<hyde::rt::std_containers, DatabaseLog, DatabaseFunctors> db(
      backend, log, functors);

  auto assert_reachable_from = [&db](int64_t i, std::vector<int64_t> expect) {
    auto reach_from = db.reachable_from_bf(i);
    std::sort(reach_from.begin(), reach_from.end());
    if (reach_from != expect) {
      std::cout << "Reached from 0:\n" << std::dec;
      for (auto v : reach_from) {
        std::cout << v << " ";
      }
      std::cout << "\n";
      std::cout << "Expected reaching from " << i << ":\n";
      for (auto v : expect) {
        std::cout << v << " ";
      }
      std::cout << "\n";
      assert(false);
    }
  };

  auto assert_reaching_to = [&db](int64_t i, std::vector<int64_t> expect) {
    auto reach_to = db.reaching_to_fb(i);
    std::sort(reach_to.begin(), reach_to.end());
    assert(reach_to == expect);
  };

  // start with a simple graph
  db.add_edge1_2({{0,1}, {0,2}, {2,0}, {1,2}, {2,3}});
  db.add_edge2_2({{0,1}, {0,2}, {2,0}, {1,2}, {2,3}});

  assert_reachable_from(0, {0, 1, 2, 3});
  assert_reachable_from(1, {0, 1, 2, 3});
  assert_reachable_from(2, {0, 1, 2, 3});
  assert_reachable_from(3, {});
  assert_reachable_from(4, {});

  // Reaching to
  assert_reaching_to(0, {0, 1, 2});
  assert_reaching_to(1, {0, 1, 2});
  assert_reaching_to(2, {0, 1, 2});
  assert_reaching_to(3, {0, 1, 2});
  assert_reaching_to(4, {});

  // Nodes
  {
    auto is_node = db.is_node_f();
    std::sort(is_node.begin(), is_node.end());
    std::vector<int64_t> expected_nodes = {0,1,2,3};
    assert(is_node == expected_nodes);
  }


  // now add more to the graph
  db.add_edge1_2({{4,3}});
  db.add_edge2_2({{4,3}});

  assert_reachable_from(0, {0, 1, 2, 3});
  assert_reachable_from(1, {0, 1, 2, 3});
  assert_reachable_from(2, {0, 1, 2, 3});
  assert_reachable_from(3, {});
  assert_reachable_from(4, {3});

  assert_reaching_to(0, {0, 1, 2});
  assert_reaching_to(1, {0, 1, 2});
  assert_reaching_to(2, {0, 1, 2});
  assert_reaching_to(3, {0, 1, 2, 4});
  assert_reaching_to(4, {});

  // Nodes
  {
    auto is_node = db.is_node_f();
    std::sort(is_node.begin(), is_node.end());
    std::vector<int64_t> expected_nodes = {0,1,2,3,4};
    assert(is_node == expected_nodes);
  }

  return 0;
}
```
.

#epilogue ```python
class Functors(DatabaseFunctors):
  pass

if __name__ == "__main__":
  db = Database(DatabaseLog(), Functors())

  # start with a simple graph
  db.add_edge1_2([(0,1), (0,2), (2,0), (1,2), (2,3)])
  db.add_edge2_2([(0,1), (0,2), (2,0), (1,2), (2,3)])

  assert sorted(db.reachable_from_bf(0)) == [0, 1, 2, 3]
  assert sorted(db.reachable_from_bf(1)) == [0, 1, 2, 3]
  assert sorted(db.reachable_from_bf(2)) == [0, 1, 2, 3]
  assert sorted(db.reachable_from_bf(3)) == []
  assert sorted(db.reachable_from_bf(4)) == []

  assert sorted(db.reaching_to_fb(0)) == [0, 1, 2]
  assert sorted(db.reaching_to_fb(1)) == [0, 1, 2]
  assert sorted(db.reaching_to_fb(2)) == [0, 1, 2]
  assert sorted(db.reaching_to_fb(3)) == [0, 1, 2]
  assert sorted(db.reaching_to_fb(4)) == []

  assert sorted(db.is_node_f()) == [0, 1, 2, 3]

  # now add more to the graph
  db.add_edge1_2([(4, 3)])
  db.add_edge2_2([(4, 3)])
  assert sorted(db.reachable_from_bf(0)) == [0, 1, 2, 3]
  assert sorted(db.reachable_from_bf(1)) == [0, 1, 2, 3]
  assert sorted(db.reachable_from_bf(2)) == [0, 1, 2, 3]
  assert sorted(db.reachable_from_bf(3)) == []
  assert sorted(db.reachable_from_bf(4)) == [3]

  assert sorted(db.reaching_to_fb(0)) == [0, 1, 2]
  assert sorted(db.reaching_to_fb(1)) == [0, 1, 2]
  assert sorted(db.reaching_to_fb(2)) == [0, 1, 2]
  assert sorted(db.reaching_to_fb(3)) == [0, 1, 2, 4]
  assert sorted(db.reaching_to_fb(4)) == []

  assert sorted(db.is_node_f()) == [0, 1, 2, 3, 4]
```
.
