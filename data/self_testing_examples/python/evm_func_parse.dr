; This example can parse EVM array declarations

#import "../evm_func_parse.dr".

#foreign Token ```python Tuple[str, int]```.
#foreign Lexeme ```python str```.
#foreign ASTNode ```python Tuple[Tuple[str,int], ...]```.

#constant Token FAKE_R_PAREN ```python (")", -1)```.

#epilogue ```python
def left_corner_bf(node: Tuple[Tuple[str,int], ...]):
    #print("left_corner({})".format(node))
    return node[0]

def right_corner_bf(node: Tuple[Tuple[str, int], ...]):
    #print("right_corner({})".format(node))
    return node[-1]

def lexeme_of_token_bf(tok: Tuple[str, int]):
    #print("lexeme_of_token_bf({})".format(tok))
    return tok[0]

def start_function_type_bbf(func_tok: Tuple[str, int], l_paren: Tuple[str, int]):
    #print("start_function_type_bbf({}, {})".format(func_tok, l_paren))
    return (func_tok, l_paren)

def add_function_type_param_bbf(base_type_: Tuple[Tuple[str,int], ...], param_: Tuple[Tuple[str,int], ...]):
    #print("add_function_type_param_bbf({}, {})".format(base_type, param))
    base_type = list(base_type_)
    base_type.extend(param_)
    return tuple(base_type)

def finish_function_type_params_bbf(base_type_: Tuple[Tuple[str,int], ...], r_paren: Tuple[str, int]):
    #print("finish_function_type_bbf({}, {})".format(base_type, r_paren))
    base_type = list(base_type_)
    base_type.append(r_paren)
    return tuple(base_type)

if __name__ == "__main__":
    functors = DatabaseFunctors()
    log = DatabaseLog()
    db = Database(log, functors)
    tokens = [("function", 0), ("(", 1), ("bytes", 2), (")", 3), ("foo", 4)]
    for i in range(1, len(tokens)):
        db.next_token_2([(tokens[i-1], tokens[i])])
    db.other_type_1([(tokens[2],)])

    good = set([(('bytes', 2),),
                (('function', 0), ('(', 1), ('bytes', 2), (')', 3))])

    # If negation handling is broken then `function()` with a fake `)` will
    # appear.

    passed = True
    num_parsed = 0
    for t in db.type_name_f():
        num_parsed += 1
        print(t)
        if t not in good:
            print("Should not have found", t)
            passed = False
        else:
          good.remove(t)

    assert 2 == num_parsed
    assert 0 == len(good)
    assert passed
```.