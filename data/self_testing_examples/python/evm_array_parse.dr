; This example can parse EVM array declarations


#import "../evm_array_parse.dr".


#foreign Token ```python Tuple[str, int]```.
#foreign Lexeme ```python str```.
#foreign ASTNode ```python Tuple```.


#epilogue ```python
def right_corner_bf(node):
    print("right_corner({})".format(node))
    return node[-1]

def lexeme_of_token_bf(tok: Tuple[str, int]):
    print("lexeme_of_token_bf({})".format(tok))
    return tok[0]

def build_sized_array_type_bbbbf(base_type, lsquare, size, rsquare):
    print("build_sized_array_type_bbbbf({}, {}, {}, {})".format(base_type, lsquare, size, rsquare))
    x = list(base_type)
    x.append(lsquare)
    x.extend(size)
    x.append(rsquare)
    return tuple(x)

def build_empty_array_type_bbbf(base_type, lsquare, rsquare):
    print("build_empty_array_type_bbbf({}, {}, {})".format(base_type, lsquare, rsquare))
    x = list(base_type)
    x.extend([lsquare, rsquare])
    return tuple(x)

if __name__ == "__main__":
    functors = DatabaseFunctors()
    log = DatabaseLog()
    db = Database(log, functors)
    tokens = [("bool", 0), ("[", 1), ("]", 2), ("uint", 3), ("[", 4), ("10", 5), ("]", 6)]
    for i in range(1, len(tokens)):
        db.next_token_2([(tokens[i-1], tokens[i])])
    db.expression_starting_at_2([(tokens[5], (tokens[5],))])
    db.other_type_1([(tokens[0],), (tokens[3],)])
    
    found_types = []
    for tuples in db.type_name_f():
        found_type = "".join(s for s, i in tuples)
        print(found_type)
        found_types.append(found_type)

    assert "bool" in found_types
    assert "uint" in found_types
    assert "bool[]" in found_types
    assert "uint[10]" in found_types
    assert len(found_types) == 4
```.
