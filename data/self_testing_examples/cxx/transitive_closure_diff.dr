
#import "../transitive_closure_diff.dr".

#prologue ```c++
#include <drlojekyll/Runtime/StdRuntime.h>
#include <algorithm>
#include <vector>
#include <iomanip>
#include <iostream>
#include <set>
#include <cstdio>
#include <cinttypes>
```.

#epilogue ```c++

using edge_set = std::set<std::tuple<uint64_t, uint64_t>>;

class Log : public DatabaseLog {
public:
  edge_set edges;
  edge_set removed_edges;

  void found_path_2(uint64_t From, uint64_t To, bool added) {
    auto old_size = edges.size();
    if (added) {
      edges.emplace(From, To);
    } else {
      edges.erase(std::make_tuple(From, To));
      removed_edges.emplace(From, To);
    }
    assert(old_size != edges.size());
  }
};

using DatabaseStorage = hyde::rt::StdStorage;

int main() {
  DatabaseFunctors functors;
  Log log;
  DatabaseStorage storage;
  Database<DatabaseStorage, Log, DatabaseFunctors> db(
      storage, log, functors);

  auto assert_reachable_from = [&](uint64_t F, std::vector<uint64_t> expect) {
    std::vector<uint64_t> got;
    db.reachable_from_bf(F, [&] (uint64_t T) {
      got.push_back(T);
      return true;
    });
    std::sort(got.begin(), got.end());
    if (got != expect) {
      std::cout << "Reached from " << F << ":\n" << std::dec;
      for (auto v : got) {
        std::cout << v << " ";
      }
      std::cout << "\n";
      std::cout << "Expected reaching from " << F << ":\n";
      for (auto v : expect) {
        std::cout << v << " ";
      }
      std::cout << "\n";
      assert(false);
    }
  };
  
  hyde::rt::SerializedVector<DatabaseStorage, uint64_t, uint64_t>
      edges(storage);
  hyde::rt::SerializedVector<DatabaseStorage, uint64_t, uint64_t>
      del_edges(storage);
  edges.Add(0, 1);
  edges.Add(0, 2);
  edges.Add(2, 0);
  edges.Add(1, 2);
  edges.Add(2, 3);
  
  db.add_edge_2(edges, del_edges);

  assert_reachable_from(0, {0, 1, 2, 3});

  std::cout << "Removing (2,3)\n";
  edges.Clear();
  del_edges.Add(2, 3);
  db.add_edge_2(edges, del_edges);
  assert_reachable_from(0, {0, 1, 2});

  assert(log.removed_edges.size() == 3);
  assert(edge_set({{2,3}, {0,3}, {1,3}}) == log.removed_edges);

  std::cout << "Adding (2,3) again\n";
  del_edges.Clear();
  edges.Add(2, 3);
  db.add_edge_2(edges, del_edges);
  assert_reachable_from(0, {0, 1, 2, 3});

  return 0;
}
```.

