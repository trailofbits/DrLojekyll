; This example shows how to implement a recursive disassembler with Dr. Lojekyll


#import "../disassemble.dr".


#prologue ```c++
#include <drlojekyll/Runtime/StdRuntime.h>
#include <algorithm>
#include <vector>
#include <iomanip>
#include <iostream>
#include <set>
#include <cstdio>
#include <cinttypes>
```.

#epilogue ```c++
template <typename DB>
void dump(DB &db) {
  std::cout << "Dump:\n";
  
  for (auto func_ea = 0; func_ea < 50; func_ea++) {
    db.function_instructions_bf(func_ea, [=] (uint64_t inst_ea) {
      std::cout << "  FuncEA=" << func_ea << " InstEA=" << inst_ea << "\n";
      return true;
    });
  }
  std::cout << "\n";
}

template <typename DB>
size_t NumFunctionInstructions(DB &db, uint64_t func_ea) {
  std::vector<uint64_t> eas;
  db.function_instructions_bf(func_ea, [&] (uint64_t inst_ea) {
    eas.push_back(inst_ea);
    return true;
  });
  std::sort(eas.begin(), eas.end());
  auto it = std::unique(eas.begin(), eas.end());
  eas.erase(it, eas.end());
  return eas.size();
}

using DatabaseStorage = hyde::rt::StdStorage;

int main() {
  DatabaseFunctors functors;
  DatabaseLog log;
  DatabaseStorage storage;
  Database<DatabaseStorage, DatabaseLog, DatabaseFunctors> db(
      storage, log, functors);

  constexpr uint8_t FALL_THROUGH = 0;
  constexpr uint8_t CALL = 1;
  
  
  // Start with a few instructions, with no control-flow between them.
  hyde::rt::SerializedVector<DatabaseStorage, uint64_t> instructions(storage);
  instructions.Add(10);
  instructions.Add(11);
  instructions.Add(12);
  instructions.Add(13);
  instructions.Add(14);
  instructions.Add(15);
  db.instruction_1(instructions);
  
  dump(db);
  assert(NumFunctionInstructions(db, 9) == 0);
  assert(NumFunctionInstructions(db, 10) == 1);
  assert(NumFunctionInstructions(db, 11) == 1);
  assert(NumFunctionInstructions(db, 12) == 1);
  assert(NumFunctionInstructions(db, 13) == 1);
  assert(NumFunctionInstructions(db, 14) == 1);
  assert(NumFunctionInstructions(db, 15) == 1);  
  
  
  // Now we add the fall-through edges, and 10 is the only instruction with
  // no predecessor, so its the function head.
  hyde::rt::SerializedVector<DatabaseStorage, uint64_t, uint64_t, uint8_t>
      transfers(storage);
  
  transfers.Add(10, 11, FALL_THROUGH);
  transfers.Add(11, 12, FALL_THROUGH);
  transfers.Add(12, 13, FALL_THROUGH);
  transfers.Add(13, 14, FALL_THROUGH);
  transfers.Add(14, 15, FALL_THROUGH);
  db.raw_transfer_3(transfers);
  
  dump(db);
  assert(NumFunctionInstructions(db, 9) == 0);
  assert(NumFunctionInstructions(db, 10) == 6);
  assert(NumFunctionInstructions(db, 11) == 0);
  assert(NumFunctionInstructions(db, 12) == 0);
  assert(NumFunctionInstructions(db, 13) == 0);
  assert(NumFunctionInstructions(db, 14) == 0);
  assert(NumFunctionInstructions(db, 15) == 0);
  
  
  // Now add the instruction 9. It will show up as a function head, because
  // it has no predecessors. The rest will stay the same because there is
  // no changes to control-flow.
  hyde::rt::SerializedVector<DatabaseStorage, uint64_t> instructions2(storage);
  instructions2.Add(9);
  db.instruction_1(instructions2);
  
  dump(db);
  assert(NumFunctionInstructions(db, 9) == 1);
  assert(NumFunctionInstructions(db, 10) == 6);
  assert(NumFunctionInstructions(db, 11) == 0);
  assert(NumFunctionInstructions(db, 12) == 0);
  assert(NumFunctionInstructions(db, 13) == 0);
  assert(NumFunctionInstructions(db, 14) == 0);
  assert(NumFunctionInstructions(db, 15) == 0);
  
  
  // Now add a fall-through between 9 and 10. 10 now has a successor, so it's
  // not a function head anymore, so all of the function instructions transfer
  // over to function 9.
  hyde::rt::SerializedVector<DatabaseStorage, uint64_t, uint64_t, uint8_t>
      transfers2(storage);
  transfers2.Add(9, 10, FALL_THROUGH);
  db.raw_transfer_3(transfers2);
  
  dump(db);
  assert(NumFunctionInstructions(db, 9) == 7);
  assert(NumFunctionInstructions(db, 10) == 0);
  assert(NumFunctionInstructions(db, 11) == 0);
  assert(NumFunctionInstructions(db, 12) == 0);
  assert(NumFunctionInstructions(db, 13) == 0);
  assert(NumFunctionInstructions(db, 14) == 0);
  assert(NumFunctionInstructions(db, 15) == 0);

  
  // Now add a function call between 10 and 14. That makes 14 look like
  // a function head, and so now that 14 is a function head, it's no longer
  // part of function 9.
  hyde::rt::SerializedVector<DatabaseStorage, uint64_t, uint64_t, uint8_t>
      transfers3(storage);
  transfers3.Add(10, 14, CALL);
  db.raw_transfer_3(transfers3);
  
  dump(db);
  assert(NumFunctionInstructions(db, 9) == 5);
  assert(NumFunctionInstructions(db, 10) == 0);
  assert(NumFunctionInstructions(db, 11) == 0);
  assert(NumFunctionInstructions(db, 12) == 0);
  assert(NumFunctionInstructions(db, 13) == 0);
  assert(NumFunctionInstructions(db, 14) == 2);
  assert(NumFunctionInstructions(db, 15) == 0);

  return 0;
}
```.
