// Copyright 2019, Trail of Bits. All rights reserved.

#pragma once

#include <drlojekyll/Sema/SIPSAnalysis.h>

namespace hyde {

// Interface for a SIPS scorer. The only requirement is that it tell us which
// permutation is the best permutation.
class SIPSScorer : public SIPSVisitor {
 public:

  virtual ~SIPSScorer(void) = default;

  // Returns `-1` if no best permutation exists, or if it hasn't been found.
  virtual int BestPermutation(void) const = 0;

  // Use `scorer` to find the best permutation that can be generated by
  // `generator`, and then apply `visitor` to that permutation.
  //
  // Returns `true` if any permutation was visited, and `false` otherwise.
  static bool VisitBestScoringPermuation(
      SIPSScorer &scorer, SIPSVisitor &visitor, SIPSGenerator &generator);
};

// A simple SIPS scorer that gives preference to permutations of clause bodies
// that more quickly bind their variables.
class BindingSpeedSIPSScorer : public SIPSScorer {
 public:
  class Impl;

  BindingSpeedSIPSScorer(void);
  virtual ~BindingSpeedSIPSScorer(void);

  void Begin(ParsedPredicate) override;
  void Begin(ParsedClause) override;

  void AssertPresent(
      ParsedDeclaration, ParsedPredicate,
      const Column *where_begin, const Column *where_end) override;

  void EnterFromWhereSelect(
      ParsedPredicate, ParsedDeclaration,
      const Column *where_begin, const Column *where_end,
      const Column *select_begin, const Column *select_end) override;

  void EnterFromSelect(
      ParsedPredicate, ParsedDeclaration,
      const Column *select_begin, const Column *select_end) override;

  int BestPermutation(void) const override;

 protected:
  std::unique_ptr<Impl> impl;
};

class FastBindingSIPSScorer final : public BindingSpeedSIPSScorer {
 public:
  virtual ~FastBindingSIPSScorer(void);

  void Commit(ParsedPredicate) override;
  void Commit(ParsedClause) override;
};

class SlowBindingSIPSScorer final : public BindingSpeedSIPSScorer {
 public:
  virtual ~SlowBindingSIPSScorer(void);

  void Commit(ParsedPredicate) override;
  void Commit(ParsedClause) override;
};

}  // namespace hyde
