// Copyright 2021, Trail of Bits, Inc. All rights reserved.

#pragma once

#include "Serializer.h"
#include "Util.h"

namespace hyde {
namespace rt {

// Wrapper around a key column in an index. We list out all table columns as
// `Key`-wrapped or `Value`-wrapped.
template <class T>
class Key;

template <typename T>
class Value;

// Given a column descriptor, which is generated by codegen, get us the type
// of that column.
template <typename ColDesc>
struct ValueType {
  using type = typename ColDesc::type;
};

template <typename ColDesc>
struct ValueType<Key<ColDesc>> {
  using type = typename ColDesc::type;
};

template <typename ColDesc>
struct ValueType<Value<ColDesc>> {
  using type = typename ColDesc::type;
};

// A column serializer is a thin wrapper around a normal `Serializer`. It exists
// to be able to selectively serialize just the `Key`-wrapped columns, or just
// the `Value`-wrapped columns.
template <typename Writer, typename... Columns>
struct ColumnSerializer;

template <typename Writer, typename Column>
struct ColumnSerializer {
 public:
  using ColumnType = typename Column::type;

  HYDE_RT_FLATTEN HYDE_RT_INLINE
  static void WriteKey(Writer &writer, const ColumnType &val) {
    Serializer<NullReader, Writer, ColumnType>::Write(writer, val);
  }

  HYDE_RT_FLATTEN HYDE_RT_INLINE
  static void WriteValue(Writer &writer, const ColumnType &val) {
    Serializer<NullReader, Writer, ColumnType>::Write(writer, val);
  }
};

// Serialize a single `Key`-wrapped column.
template <typename Writer, typename Column>
struct ColumnSerializer<Writer, Key<Column>> {
 public:
  using ColumnType = typename Column::type;

  HYDE_RT_FLATTEN HYDE_RT_INLINE
  static void WriteKey(Writer &writer, const ColumnType &val) {
    Serializer<NullReader, Writer, ColumnType>::Write(writer, val);
  }

  HYDE_RT_FLATTEN HYDE_RT_INLINE
  static void WriteValue(Writer &, const ColumnType &val) {}
};

// Serialize a single `Value`-wrapped column.
template <typename Writer, typename Column>
struct ColumnSerializer<Writer, Value<Column>> {
 public:
  using ColumnType = typename Column::type;

  HYDE_RT_FLATTEN HYDE_RT_INLINE
  static void WriteKey(Writer &writer, const ColumnType &val) {}

  HYDE_RT_FLATTEN HYDE_RT_INLINE
  static void WriteValue(Writer &writer, const ColumnType &val) {
    Serializer<NullReader, Writer, ColumnType>::Write(writer, val);
  }
};

// Unpack template pack and write the Key/Value columns as they appear
template <typename Writer, typename Column, typename... Columns>
struct ColumnSerializer<Writer, Column, Columns...> {
 public:
  using ColumnType = typename ValueType<Column>::type;

  HYDE_RT_FLATTEN HYDE_RT_INLINE
  static void WriteKey(Writer &writer, const ColumnType &val,
                       const typename ValueType<Columns>::type &...rest) {
    ColumnSerializer<Writer, Column>::WriteKey(writer, val);
    if constexpr (0u < sizeof...(Columns)) {
      ColumnSerializer<Writer, Columns...>::WriteKey(writer, rest...);
    }
  }

  HYDE_RT_FLATTEN HYDE_RT_INLINE
  static void WriteValue(Writer &writer, const ColumnType &val,
                         const typename ValueType<Columns>::type &...rest) {
    ColumnSerializer<Writer, Column>::WriteValue(writer, val);
    if constexpr (0u < sizeof...(Columns)) {
      ColumnSerializer<Writer, Columns...>::WriteValue(writer, rest...);
    }
  }
};

}  // namespace rt
}  // namespace hyde
